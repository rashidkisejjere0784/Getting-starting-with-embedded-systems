
System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000002de  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ea3  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c8e  00000000  00000000  0000129f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ae  00000000  00000000  00001f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000023dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000602  00000000  00000000  00002450  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000327  00000000  00000000  00002a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002d79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ed       	ldi	r30, 0xDE	; 222
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	85 d0       	rcall	.+266    	; 0x21a <main>
 110:	e4 c0       	rjmp	.+456    	; 0x2da <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <_Z11lightNumberi>:

#include <avr/io.h>
#include <util/delay.h>

char lightNumber(int number){
	if (number == 1)
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	91 05       	cpc	r25, r1
 118:	c9 f0       	breq	.+50     	; 0x14c <_Z11lightNumberi+0x38>
	{
		return 0b11001111;
	}
	else if(number == 2){
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	91 05       	cpc	r25, r1
 11e:	c1 f0       	breq	.+48     	; 0x150 <_Z11lightNumberi+0x3c>
		return 0b10100100;
	}
	else if(number == 3){
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	91 05       	cpc	r25, r1
 124:	b9 f0       	breq	.+46     	; 0x154 <_Z11lightNumberi+0x40>
		return 0b10110000;
	}
	else if(number == 4){
 126:	84 30       	cpi	r24, 0x04	; 4
 128:	91 05       	cpc	r25, r1
 12a:	b1 f0       	breq	.+44     	; 0x158 <_Z11lightNumberi+0x44>
		return 0b10011001;
	}
	else if(number == 5){
 12c:	85 30       	cpi	r24, 0x05	; 5
 12e:	91 05       	cpc	r25, r1
 130:	a9 f0       	breq	.+42     	; 0x15c <_Z11lightNumberi+0x48>
		return 0b10010010;
	}
	else if(number == 6){
 132:	86 30       	cpi	r24, 0x06	; 6
 134:	91 05       	cpc	r25, r1
 136:	a1 f0       	breq	.+40     	; 0x160 <_Z11lightNumberi+0x4c>
		return 0b10000010;
	}
	else if(number == 7){
 138:	87 30       	cpi	r24, 0x07	; 7
 13a:	91 05       	cpc	r25, r1
 13c:	99 f0       	breq	.+38     	; 0x164 <_Z11lightNumberi+0x50>
		return 0b11111000;
	}
	else if(number == 8){
 13e:	88 30       	cpi	r24, 0x08	; 8
 140:	91 05       	cpc	r25, r1
 142:	91 f0       	breq	.+36     	; 0x168 <_Z11lightNumberi+0x54>
		return 0b10000000;
	}
	else if(number == 9){
 144:	09 97       	sbiw	r24, 0x09	; 9
 146:	91 f0       	breq	.+36     	; 0x16c <_Z11lightNumberi+0x58>
		return 0b10010000;
	}
	
	
	return 0b00000000;
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	08 95       	ret
#include <util/delay.h>

char lightNumber(int number){
	if (number == 1)
	{
		return 0b11001111;
 14c:	8f ec       	ldi	r24, 0xCF	; 207
 14e:	08 95       	ret
	}
	else if(number == 2){
		return 0b10100100;
 150:	84 ea       	ldi	r24, 0xA4	; 164
 152:	08 95       	ret
	}
	else if(number == 3){
		return 0b10110000;
 154:	80 eb       	ldi	r24, 0xB0	; 176
 156:	08 95       	ret
	}
	else if(number == 4){
		return 0b10011001;
 158:	89 e9       	ldi	r24, 0x99	; 153
 15a:	08 95       	ret
	}
	else if(number == 5){
		return 0b10010010;
 15c:	82 e9       	ldi	r24, 0x92	; 146
 15e:	08 95       	ret
	}
	else if(number == 6){
		return 0b10000010;
 160:	82 e8       	ldi	r24, 0x82	; 130
 162:	08 95       	ret
	}
	else if(number == 7){
		return 0b11111000;
 164:	88 ef       	ldi	r24, 0xF8	; 248
 166:	08 95       	ret
	}
	else if(number == 8){
		return 0b10000000;
 168:	80 e8       	ldi	r24, 0x80	; 128
 16a:	08 95       	ret
	}
	else if(number == 9){
		return 0b10010000;
 16c:	80 e9       	ldi	r24, 0x90	; 144
	}
	
	
	return 0b00000000;
}
 16e:	08 95       	ret

00000170 <_Z12animateBulbsi>:

void animateBulbs(int fromNumber){
 170:	cf 92       	push	r12
 172:	df 92       	push	r13
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	27 97       	sbiw	r28, 0x07	; 7
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
 190:	8c 01       	movw	r16, r24
	char bulb_light[7] = {0b00000001,0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000};
 192:	87 e0       	ldi	r24, 0x07	; 7
 194:	e0 e0       	ldi	r30, 0x00	; 0
 196:	f2 e0       	ldi	r31, 0x02	; 2
 198:	de 01       	movw	r26, r28
 19a:	11 96       	adiw	r26, 0x01	; 1
 19c:	01 90       	ld	r0, Z+
 19e:	0d 92       	st	X+, r0
 1a0:	8a 95       	dec	r24
 1a2:	e1 f7       	brne	.-8      	; 0x19c <_Z12animateBulbsi+0x2c>
	for (int i = fromNumber; i > 0; i--){
 1a4:	10 16       	cp	r1, r16
 1a6:	11 06       	cpc	r1, r17
 1a8:	4c f5       	brge	.+82     	; 0x1fc <_Z12animateBulbsi+0x8c>
 1aa:	7e 01       	movw	r14, r28
 1ac:	e0 0e       	add	r14, r16
 1ae:	f1 1e       	adc	r15, r17
		if(i < 8){
		PORTH = bulb_light[i - 1];
 1b0:	68 94       	set
 1b2:	cc 24       	eor	r12, r12
 1b4:	c1 f8       	bld	r12, 1
 1b6:	dd 24       	eor	r13, r13
 1b8:	d3 94       	inc	r13
}

void animateBulbs(int fromNumber){
	char bulb_light[7] = {0b00000001,0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000};
	for (int i = fromNumber; i > 0; i--){
		if(i < 8){
 1ba:	08 30       	cpi	r16, 0x08	; 8
 1bc:	11 05       	cpc	r17, r1
 1be:	6c f4       	brge	.+26     	; 0x1da <_Z12animateBulbsi+0x6a>
		PORTH = bulb_light[i - 1];
 1c0:	f7 01       	movw	r30, r14
 1c2:	80 81       	ld	r24, Z
 1c4:	f6 01       	movw	r30, r12
 1c6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	ff e5       	ldi	r31, 0x5F	; 95
 1ca:	2a ee       	ldi	r18, 0xEA	; 234
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	f1 50       	subi	r31, 0x01	; 1
 1d0:	20 40       	sbci	r18, 0x00	; 0
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <_Z12animateBulbsi+0x5e>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <_Z12animateBulbsi+0x68>
 1d8:	00 00       	nop
		_delay_ms(300);
	}
	PORTF = lightNumber(i);
 1da:	c8 01       	movw	r24, r16
 1dc:	9b df       	rcall	.-202    	; 0x114 <_Z11lightNumberi>
 1de:	81 bb       	out	0x11, r24	; 17
 1e0:	e7 ea       	ldi	r30, 0xA7	; 167
 1e2:	f1 e6       	ldi	r31, 0x61	; 97
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <_Z12animateBulbsi+0x74>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <_Z12animateBulbsi+0x7a>
 1ea:	00 00       	nop
	return 0b00000000;
}

void animateBulbs(int fromNumber){
	char bulb_light[7] = {0b00000001,0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000};
	for (int i = fromNumber; i > 0; i--){
 1ec:	01 50       	subi	r16, 0x01	; 1
 1ee:	11 09       	sbc	r17, r1
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	ef 1a       	sub	r14, r31
 1f4:	f1 08       	sbc	r15, r1
 1f6:	01 15       	cp	r16, r1
 1f8:	11 05       	cpc	r17, r1
 1fa:	f9 f6       	brne	.-66     	; 0x1ba <_Z12animateBulbsi+0x4a>
		_delay_ms(300);
	}
	PORTF = lightNumber(i);
	_delay_ms(100);
	}
}
 1fc:	27 96       	adiw	r28, 0x07	; 7
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	ff 90       	pop	r15
 212:	ef 90       	pop	r14
 214:	df 90       	pop	r13
 216:	cf 90       	pop	r12
 218:	08 95       	ret

0000021a <main>:


int main(void)
{
    /* Replace with your application code */
	DDRF = 0b11111111;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	80 bb       	out	0x10, r24	; 16
	DDRH = 0b00000000;
 21e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRK = 0b00000111;
 222:	97 e0       	ldi	r25, 0x07	; 7
 224:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	
	int selected = 0;
	
	PINK = 0b11111111;
 228:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
	
    while (1) 
    {
		PORTK = 0b00000011;
 22c:	08 e0       	ldi	r16, 0x08	; 8
 22e:	11 e0       	ldi	r17, 0x01	; 1
 230:	0f 2e       	mov	r0, r31
 232:	f3 e0       	ldi	r31, 0x03	; 3
 234:	af 2e       	mov	r10, r31
 236:	f0 2d       	mov	r31, r0
		PORTH = 0b00000000;
 238:	68 94       	set
 23a:	ee 24       	eor	r14, r14
 23c:	e1 f8       	bld	r14, 1
 23e:	ff 24       	eor	r15, r15
 240:	f3 94       	inc	r15
		PORTF = 0b11111111;
		
		if((PINK & 0b00001000) == 0){
 242:	c6 e0       	ldi	r28, 0x06	; 6
 244:	d1 e0       	ldi	r29, 0x01	; 1
			animateBulbs(selected);
			
		}
		
		
		PORTK = 0b00000101;
 246:	0f 2e       	mov	r0, r31
 248:	f5 e0       	ldi	r31, 0x05	; 5
 24a:	bf 2e       	mov	r11, r31
 24c:	f0 2d       	mov	r31, r0
			selected = 8;
			animateBulbs(selected);
			
		}
		
		PORTK = 0b00000110;
 24e:	0f 2e       	mov	r0, r31
 250:	f6 e0       	ldi	r31, 0x06	; 6
 252:	cf 2e       	mov	r12, r31
 254:	f0 2d       	mov	r31, r0
	
    while (1) 
    {
		PORTK = 0b00000011;
		PORTH = 0b00000000;
		PORTF = 0b11111111;
 256:	dd 24       	eor	r13, r13
 258:	da 94       	dec	r13
	
	PINK = 0b11111111;
	
    while (1) 
    {
		PORTK = 0b00000011;
 25a:	f8 01       	movw	r30, r16
 25c:	a0 82       	st	Z, r10
		PORTH = 0b00000000;
 25e:	f7 01       	movw	r30, r14
 260:	10 82       	st	Z, r1
		PORTF = 0b11111111;
 262:	d1 ba       	out	0x11, r13	; 17
		
		if((PINK & 0b00001000) == 0){
 264:	88 81       	ld	r24, Y
 266:	83 fd       	sbrc	r24, 3
 268:	03 c0       	rjmp	.+6      	; 0x270 <main+0x56>
			
			selected = 1;
			animateBulbs(selected);
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	80 df       	rcall	.-256    	; 0x170 <_Z12animateBulbsi>
			
		}
		
		if((PINK & 0b00010000) == 0){
 270:	88 81       	ld	r24, Y
 272:	84 fd       	sbrc	r24, 4
 274:	03 c0       	rjmp	.+6      	; 0x27c <main+0x62>
			
			selected = 4;
			animateBulbs(selected);
 276:	84 e0       	ldi	r24, 0x04	; 4
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	7a df       	rcall	.-268    	; 0x170 <_Z12animateBulbsi>
			
		}
		
		if((PINK & 0b00100000) == 0){
 27c:	88 81       	ld	r24, Y
 27e:	85 fd       	sbrc	r24, 5
 280:	03 c0       	rjmp	.+6      	; 0x288 <main+0x6e>
			
			selected = 7;
			animateBulbs(selected);
 282:	87 e0       	ldi	r24, 0x07	; 7
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	74 df       	rcall	.-280    	; 0x170 <_Z12animateBulbsi>
			
		}
		
		
		PORTK = 0b00000101;
 288:	f8 01       	movw	r30, r16
 28a:	b0 82       	st	Z, r11
		if((PINK & 0b00001000) == 0){
 28c:	88 81       	ld	r24, Y
 28e:	83 fd       	sbrc	r24, 3
			
			selected = 2;
			animateBulbs(selected);
 290:	03 c0       	rjmp	.+6      	; 0x298 <main+0x7e>
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	6c df       	rcall	.-296    	; 0x170 <_Z12animateBulbsi>
			
		}
		
		if((PINK & 0b00010000) == 0){
 298:	88 81       	ld	r24, Y
 29a:	84 fd       	sbrc	r24, 4
			
			selected = 5;
			animateBulbs(selected);
 29c:	03 c0       	rjmp	.+6      	; 0x2a4 <main+0x8a>
 29e:	85 e0       	ldi	r24, 0x05	; 5
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	66 df       	rcall	.-308    	; 0x170 <_Z12animateBulbsi>
			
		}
		
		if((PINK & 0b00100000) == 0){
 2a4:	88 81       	ld	r24, Y
 2a6:	85 fd       	sbrc	r24, 5
			
			selected = 8;
			animateBulbs(selected);
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <main+0x96>
 2aa:	88 e0       	ldi	r24, 0x08	; 8
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	60 df       	rcall	.-320    	; 0x170 <_Z12animateBulbsi>
			
		}
		
		PORTK = 0b00000110;
 2b0:	f8 01       	movw	r30, r16
		if((PINK & 0b00001000) == 0){
 2b2:	c0 82       	st	Z, r12
 2b4:	88 81       	ld	r24, Y
 2b6:	83 fd       	sbrc	r24, 3
			
			selected = 3;
			animateBulbs(selected);
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <main+0xa6>
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	90 e0       	ldi	r25, 0x00	; 0
			
		}
		
		if((PINK & 0b00010000) == 0){
 2be:	58 df       	rcall	.-336    	; 0x170 <_Z12animateBulbsi>
 2c0:	88 81       	ld	r24, Y
 2c2:	84 fd       	sbrc	r24, 4
			
			selected = 6;
			animateBulbs(selected);
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <main+0xb2>
 2c6:	86 e0       	ldi	r24, 0x06	; 6
 2c8:	90 e0       	ldi	r25, 0x00	; 0
			
		}
		
		if((PINK & 0b00100000) == 0){
 2ca:	52 df       	rcall	.-348    	; 0x170 <_Z12animateBulbsi>
 2cc:	88 81       	ld	r24, Y
 2ce:	85 fd       	sbrc	r24, 5
			
			selected = 9;
			animateBulbs(selected);
 2d0:	c4 cf       	rjmp	.-120    	; 0x25a <main+0x40>
 2d2:	89 e0       	ldi	r24, 0x09	; 9
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	4c df       	rcall	.-360    	; 0x170 <_Z12animateBulbsi>
 2d8:	c0 cf       	rjmp	.-128    	; 0x25a <main+0x40>

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
